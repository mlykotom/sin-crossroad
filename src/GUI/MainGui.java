package GUI;

import Agents.WorldAgent;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import jade.util.Logger;
import org.apache.commons.lang3.time.DateUtils;

import javax.swing.*;
import java.awt.*;


public class MainGui extends JFrame {
    private static Logger sLogger = Logger.getMyLogger(MainGui.class.getSimpleName());

    private final WorldAgent mWorldAgent;
    private WorldMapCanvas mWorldMapCanvas;

    private JPanel rootPanel;
    private JPanel worldMap;
    private JLabel simulationTime;
    private JLabel averageWaitingTime;


    public static MainGui runGUI(WorldAgent worldAgent) {
        MainGui mainGui = new MainGui(worldAgent);
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException | ClassNotFoundException e) {
                e.printStackTrace();
            }

            Runtime.getRuntime().addShutdownHook(new Thread(mainGui::closeApp));
            mainGui.setup();
        });
        return mainGui;
    }


    public void closeApp() {
        Thread thread = new Thread(() -> {
            // TODO may clean something on shutdown
        });
        thread.start();
    }


    private MainGui(WorldAgent worldAgent) {
        mWorldAgent = worldAgent;
        mWorldMapCanvas = new WorldMapCanvas(worldAgent.getWorld(), worldAgent.getCanvasSize());
    }


    public void setup() {
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualization of crossroads");
        setContentPane(rootPanel);
        worldMap.add(mWorldMapCanvas);
        pack();
    }


    public void update(long ellapsedTime) {
        simulationTime.setText(String.format("%d s", ellapsedTime / DateUtils.MILLIS_PER_SECOND));
        worldMap.repaint();
    }

    public void updateAverageWaitingTime(float time) {
        averageWaitingTime.setText(String.format("%.2f s", time));
        worldMap.repaint();
    }

    public WorldMapCanvas getWorldMap() {
        return mWorldMapCanvas;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        worldMap = new JPanel();
        worldMap.setLayout(new GridBagLayout());
        rootPanel.add(worldMap, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 400), null, null, 1, false));
        final JLabel label1 = new JLabel();
        label1.setText("Simulation time:");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        simulationTime = new JLabel();
        simulationTime.setText("0s");
        rootPanel.add(simulationTime, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }


    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}